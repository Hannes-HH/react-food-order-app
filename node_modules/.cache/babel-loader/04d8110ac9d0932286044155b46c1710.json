{"ast":null,"code":"var _jsxFileName = \"/Users/hannes/Downloads/01-starting-project-7/src/Store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport CartContext from './Cart-Context';\nimport { useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CartProvider = props => {\n  _s();\n\n  const defaultCartState = {\n    items: [],\n    totalAmount: 0\n  };\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount\n  };\n\n  const cartReducer = (state, action) => {\n    if (action.type === 'ADD') {\n      const updatedItems = state.items.concat(action.item);\n      const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n      return {\n        items: updatedItems,\n        totalAmount: updatedTotalAmount\n      };\n    }\n\n    return defaultCartState;\n  };\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const CartContext = {\n    items: [],\n    totalAmount: 0,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/hannes/Downloads/01-starting-project-7/src/Store/CartProvider.js"],"names":["CartContext","useReducer","CartProvider","props","defaultCartState","items","totalAmount","cartState","dispatchCartAction","cartReducer","cartContext","state","action","type","updatedItems","concat","item","updatedTotalAmount","price","amount","addItemToCartHandler","removeItemFromCartHandler","id","addItem","removeItem","children"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,gBAAxB;AACA,SAASC,UAAT,QAA2B,OAA3B;;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC5B,QAAMC,gBAAgB,GAAG;AACrBC,IAAAA,KAAK,EAAE,EADc;AAErBC,IAAAA,WAAW,EAAE;AAFQ,GAAzB;AAKA,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCP,UAAU,CAAEQ,WAAF,EAAeL,gBAAf,CAAlD;AAEA,QAAMM,WAAW,GAAE;AACfL,IAAAA,KAAK,EAAEE,SAAS,CAACF,KADF;AAEfC,IAAAA,WAAW,EAAEC,SAAS,CAACD;AAFR,GAAnB;;AAKA,QAAMG,WAAW,GAAG,CAACE,KAAD,EAAQC,MAAR,KAAmB;AACnC,QAAGA,MAAM,CAACC,IAAP,KAAgB,KAAnB,EAA0B;AACtB,YAAMC,YAAY,GAAGH,KAAK,CAACN,KAAN,CAAYU,MAAZ,CAAmBH,MAAM,CAACI,IAA1B,CAArB;AACA,YAAMC,kBAAkB,GAAGN,KAAK,CAACL,WAAN,GAAoBM,MAAM,CAACI,IAAP,CAAYE,KAAZ,GAAoBN,MAAM,CAACI,IAAP,CAAYG,MAA/E;AACA,aAAO;AACHd,QAAAA,KAAK,EAAES,YADJ;AAEHR,QAAAA,WAAW,EAAEW;AAFV,OAAP;AAIH;;AACD,WAAOb,gBAAP;AACH,GAVD;;AAYA,QAAMgB,oBAAoB,GAAIJ,IAAD,IAAU;AACnCR,IAAAA,kBAAkB,CAAC;AAACK,MAAAA,IAAI,EAAE,KAAP;AAAcG,MAAAA,IAAI,EAAEA;AAApB,KAAD,CAAlB;AACH,GAFD;;AAIA,QAAMK,yBAAyB,GAAIC,EAAD,IAAQ;AACtCd,IAAAA,kBAAkB,CAAC;AAACK,MAAAA,IAAI,EAAC,QAAN;AAAgBS,MAAAA,EAAE,EAACA;AAAnB,KAAD,CAAlB;AACH,GAFD;;AAIA,QAAMtB,WAAW,GAAG;AAChBK,IAAAA,KAAK,EAAE,EADS;AAEhBC,IAAAA,WAAW,EAAE,CAFG;AAGhBiB,IAAAA,OAAO,EAAEH,oBAHO;AAIhBI,IAAAA,UAAU,EAAEH;AAJI,GAApB;AAOA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEX,WAA7B;AAAA,cACKP,KAAK,CAACsB;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA7CD;;GAAMvB,Y;;KAAAA,Y;AA+CN,eAAeA,YAAf","sourcesContent":["import CartContext from './Cart-Context'; \nimport { useReducer } from 'react'; \n\nconst CartProvider = (props) => {\n    const defaultCartState = {\n        items: [],\n        totalAmount: 0,\n    }\n\n    const [cartState, dispatchCartAction] = useReducer (cartReducer, defaultCartState); \n    \n    const cartContext= {\n        items: cartState.items,\n        totalAmount: cartState.totalAmount,\n    }\n\n    const cartReducer = (state, action) => {\n        if(action.type === 'ADD') {\n            const updatedItems = state.items.concat(action.item);\n            const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n            return {\n                items: updatedItems, \n                totalAmount: updatedTotalAmount\n            };  \n        }\n        return defaultCartState; \n    }; \n\n    const addItemToCartHandler = (item) => {\n        dispatchCartAction({type: 'ADD', item: item}); \n    }; \n\n    const removeItemFromCartHandler = (id) => {\n        dispatchCartAction({type:'REMOVE', id:id});\n    }; \n\n    const CartContext = {\n        items: [], \n        totalAmount: 0, \n        addItem: addItemToCartHandler, \n        removeItem: removeItemFromCartHandler,\n    }; \n\n    return (\n        <CartContext.Provider value={cartContext}>\n            {props.children}\n            </CartContext.Provider>\n    )\n}; \n\nexport default CartProvider; "]},"metadata":{},"sourceType":"module"}